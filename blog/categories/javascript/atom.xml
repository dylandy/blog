<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Dylandy's Murmur]]></title>
  <link href="http://blog.dylandy.tw//blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.dylandy.tw//"/>
  <updated>2020-02-08T15:59:34+08:00</updated>
  <id>http://blog.dylandy.tw//</id>
  <author>
    <name><![CDATA[Dylandy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用 canvas 進行前端圖片壓縮]]></title>
    <link href="http://blog.dylandy.tw//blog/2020/01/17/li-yong-canvas-jin-xing-qian-duan-tu-pian-ya-suo/"/>
    <updated>2020-01-17T22:24:19+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2020/01/17/li-yong-canvas-jin-xing-qian-duan-tu-pian-ya-suo</id>
    <content type="html"><![CDATA[<p>最近工作上剛好遇到一個需要調校效能的站，在過程中我們運用了許多不同的方法將整體的營運效能往上大幅度的提升，在未來幾篇文章我會討論有關如何提升前端效能的方法，雖然都有些老生常談，但是希望可以給初學者一些方向，當網站效能需要最佳化時可以想到這些方法。</p>

<p>許多人在實作 <a href="https://en.wikipedia.org/wiki/Content_management_system">CMS（Content Management System）</a>時，對於儲存文章內部的圖片時，常常很直觀的透過 JavaScript 在前端將其轉成 base64 編碼之後，與文章本文一起變成一巨大字串傳至後端後直接儲存在資料庫內，這樣的會嚴重的造成效能上的問題，首先是無法進行 <a href="https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video">lazy loading</a>，其次是會使得 api request 封包非常巨大，需要花非常多時間下載，造成使用者等待時間較長，在這樣的狀況下，若是只能調校前端使其效能能夠提升上去，我們可以從壓縮圖片著手，將圖片壓縮之後，api request 容量減少，可以有效的提升下載效率與畫面渲染時間，提升使用者體驗。</p>

<!-- more -->


<p>以下是一個簡單透過 canvas 來進行圖片壓縮的方法。</p>

<p>首先，加入一個我們工作的 canvas tag，這個 canvas 可見與不可見(<code>display: none</code>)皆行，視情形調整是否需要顯示給使用者檢視，並加上一個需要使用者上傳的 input tag，我們會需要一個 image tag 用來暫存使用者上傳的檔案，一樣，這個 image tag 也可以設定為使用者不可見。</p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;before&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;upload-image&quot;</span> <span class="na">id=</span><span class="s">&quot;upload-image&quot;</span> <span class="na">required</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;canvas</span> <span class="na">style=</span><span class="s">&quot;display: none&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span></code></pre></div></p>

<p>我們需要針對這個 input tag 進行事件的設定，當有檔案被上傳之後，我們會將其用 <a href="https://en.wikipedia.org/wiki/Base64">Base64</a> 的方式寫入 canvas 裡面，並將其壓縮成其他不同的格式，下面我們示範轉換成 <a href="https://developers.google.com/speed/webp">WebP 格式</a>，你可以視需求轉換成你所需要的格式。</p>

<p><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">input</span><span class="p">[</span><span class="nx">name</span><span class="o">=</span><span class="nx">upload</span><span class="o">-</span><span class="nx">image</span><span class="p">]</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
  <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">change</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ReadAndCompress</span><span class="p">(</span><span class="nx">event</span><span class="p">));</span></code></pre></div></p>

<p>注意到我們上面呼叫了另外一個 <code>function ReadAndCompress</code> 並將 event 傳入，我們在另外一個地方定義了此 function，透過 <code>FileReader</code> 這個內建的檔案讀取 <code>class</code> 將檔案讀出之後，將並將其寫入 canvas 內，並將整個 canvas 的內容透過 canvas 的內容轉成我們所想要的檔案格式，這邊我們轉成 WebP。</p>

<p><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">ReadAndCompress</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Before</span> <span class="nx">Compression</span><span class="o">:</span> <span class="nx">$</span><span class="p">{(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">size</span><span class="o">/</span><span class="p">(</span><span class="mi">1000</span><span class="o">*</span><span class="mi">1024</span><span class="p">)).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span> <span class="nx">MB</span><span class="o">&lt;</span><span class="err">/code&gt;);</span></code></pre></div></p>

<p>首先透過 <code>e.target.files[0].size</code> 可以取得檔案的大小（注意單位為 K)，我們先把它印出來作為壓縮前的大小對照。</p>

<p><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
 <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></code></pre></div></p>

<p>新增一個 FileReader 並指定檔案以 Base64 的方式讀取。</p>

<p><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">img</span><span class="p">.</span><span class="nx">before</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
    <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
    <span class="nx">img</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">canvas</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
      <span class="nx">elem</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
      <span class="nx">elem</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mi">2</span><span class="nx">d</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
      <span class="kr">const</span> <span class="nx">webp</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">image</span><span class="o">/</span><span class="nx">webp</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="mf">0.5</span><span class="p">);</span></code></pre></div></p>

<p>接著我們新增一個 onload 事件，並在確定 loading 結束之後，將圖片寫進 image tag 裡面，這時候，圖片會以剛剛提到的 Base64 格式寫入，並在這個圖片的 onload 事件被觸發，也就是已經確定載入完成之後，我們可以將這張圖片寫入 canvas 來進行壓縮，為了確保壓縮的圖片大小仍舊與原本圖片相同，我們 canvas tag 本身不設定寬高，寬高在圖片載入後設定上去，我們可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage"><code>drawImage</code></a> 函式將 Base64 圖片直接寫入 canvas 裡面，之後，我們就能透過 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL"><code>ctx.canvas.toDataURL</code></a> 函式將 canvas 的內容轉成 Base64 輸出，<code>toDataURL</code> 的格式如下： <code>toDataURL(type, option)</code> ，一般 <code>option</code> 即是輸出品質，在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL">MDN</a> 上有提到預設 type 為 png ，若是選定的格式在這個瀏覽器上不支援的話，輸出則會自動變為 png，以上就是一個簡單的利用前端來壓縮圖片的小技巧，下面是整個範例 code，提供參考。</p>

<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="dylandy" data-slug-hash="YzPovQz" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Frontend Image Compress">
  <span>See the Pen <a href="https://codepen.io/dylandy/pen/YzPovQz">
  Frontend Image Compress</a> by dylandy.chang (<a href="https://codepen.io/dylandy">@dylandy</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>


<script async src="https://static.codepen.io/assets/embed/ei.js"></script>


<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>!doctype html&gt;
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;upload-image&quot;</span> <span class="na">id=</span><span class="s">&quot;upload-image&quot;</span> <span class="na">required</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">name=</span><span class="s">&quot;before-compression&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">name=</span><span class="s">&quot;after-compression&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;before&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none;&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;canvas</span> <span class="na">style=</span><span class="s">&quot;display: none;&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;after&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none;&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./index.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">ReadAndCompress</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">size</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Before</span> <span class="nx">Compression</span><span class="o">:</span> <span class="nx">$</span><span class="p">{(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">size</span><span class="o">/</span><span class="p">(</span><span class="mi">1000</span><span class="o">*</span><span class="mi">1024</span><span class="p">)).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span> <span class="nx">MB</span><span class="o">&lt;</span><span class="err">/code&gt;;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">p</span><span class="p">[</span><span class="nx">name</span><span class="o">=</span><span class="nx">before</span><span class="o">-</span><span class="nx">compression</span><span class="p">]</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">size</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
  <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">img</span><span class="p">.</span><span class="nx">before</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
    <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
    <span class="c1">//img.style = &amp;ldquo;display: true&amp;rdquo;;</span>
    <span class="nx">img</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">canvas</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
      <span class="nx">elem</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
      <span class="nx">elem</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mi">2</span><span class="nx">d</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
      <span class="kr">const</span> <span class="nx">webp</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">image</span><span class="o">/</span><span class="nx">webp</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="mf">0.5</span><span class="p">);</span>
      <span class="kr">const</span> <span class="nx">imgAfter</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">img</span><span class="p">.</span><span class="nx">after</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
      <span class="nx">imgAfter</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">webp</span><span class="p">;</span>
      <span class="c1">//imgAfter.style = &amp;ldquo;display: true&amp;rdquo;;</span>
      <span class="kr">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">data</span><span class="o">:</span><span class="nx">image</span><span class="o">/</span><span class="nx">webp</span><span class="p">;</span><span class="nx">base64</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
      <span class="kr">const</span> <span class="nx">imgFileSize</span> <span class="o">=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">((</span><span class="nx">webp</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">head</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">*&amp;</span><span class="nx">frac34</span><span class="p">;)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1000</span><span class="p">)).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">p</span><span class="p">[</span><span class="nx">name</span><span class="o">=</span><span class="nx">after</span><span class="o">-</span><span class="nx">compression</span><span class="p">]</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">innerHTML</span> <span class="o">=</span>
        <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">After</span> <span class="nx">Compression</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">imgFileSize</span><span class="p">}</span> <span class="nx">KB</span><span class="o">&lt;</span><span class="err">/code&gt;;</span>
    <span class="p">},</span>
    <span class="nx">reader</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">input</span><span class="p">[</span><span class="nx">name</span><span class="o">=</span><span class="nx">upload</span><span class="o">-</span><span class="nx">image</span><span class="p">]</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
<span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">change</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ReadAndCompress</span><span class="p">(</span><span class="nx">event</span><span class="p">));</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Event Loop - <br><small>為什麼你應該了解它（一）</small>]]></title>
    <link href="http://blog.dylandy.tw//blog/2019/12/26/javascript-event-loop-jian-dan-tao-lun/"/>
    <updated>2019-12-26T15:28:23+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2019/12/26/javascript-event-loop-jian-dan-tao-lun</id>
    <content type="html"><![CDATA[<p>最近在工作上面頻繁的使用 Node.js，雖然以前在開發前端有使用 JavaScript 的經驗，但是對於 JavaScript 的一些特性在這幾年中仍是不求甚解的，對於 JavaScript 的<a href="https://www.google.com/search?q=javascript+what+the+fuck&amp;client=firefox-b-d&amp;sxsrf=ACYBGNRxxqeZNR62CPMhSK4QvPbxv6xMOg:1578734050768&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwiJvanSmvvmAhVAx4sBHUgvCqAQ_AUoAXoECAsQAw&amp;biw=1280&amp;bih=703&amp;dpr=2">一些奇怪的行為</a>，總是用其他語言的想法來思考最後總是無奈的 workaround，前一段時間，花了一點空閒時間稍微了解了一下 JavaScript 底層到底做了什麼，這篇文章將討論 JavaScript 底層最重要的機制之一 Event Loop 的流程如何影響到 JavaScript 的執行行為。</p>

<p>相信很多人在剛開始接觸 JavaScript 的時候，對於異步行為是非常陌生與困惑的，到底為什麼一個號稱<a href="https://dev.to/steelvoltage/if-javascript-is-single-threaded-how-is-it-asynchronous-56gd">「單執行緒」</a>的程式與語言，能夠以不卡住主執行緒的方式來執行，對於其他程式語言的使用者來說，這是非常不合理的行為，到底 JavaScript 的底層是怎麼處理這樣的行為呢？</p>

<p>首先，讓我們先看一下下面這段 code。</p>

<pre><code class="js">console.log("before time out");
setTimeout(() =&gt; { console.log("hello") }, 0);
console.log("after time out");
</code></pre>

<p>讓我們來作個小測驗吧，以上的程式碼的執行結果如何呢？</p>

<div name="first_ans" style="background: #ebebeb; display: flex; padding: 1em; margin-bottom: 10px; justify-content: space-around; cursor: pointer">
  <code style="display: inline-flex; background: none; border: 0">
    => before time out<br>
    => hello<br>
    => after timeout
  </code>
</div>


<div name="second_ans" style="background: #ebebeb; display: flex; padding: 1em; justify-content: space-around; cursor: pointer">
  <code style="display: inline-flex; background: none; border: 0" >
    => before time out<br>
    => after time out<br>
    => hello
  </code>
</div>




<script>
  // simple quiz
  const first_ans = document.querySelector("div[name=first_ans]");
  const second_ans = document.querySelector("div[name=second_ans]");
  first_ans.addEventListener("click", (e) => {
    first_ans.style.backgroundColor = "#d9534f";
    second_ans.style.backgroundColor = "#ebebeb";
  });
  second_ans.addEventListener("click", (e) => {
    first_ans.style.backgroundColor = "#ebebeb";
    second_ans.style.backgroundColor = "#5cb85c";
  });
</script>




<!-- more -->


<p>你答對了嗎？如果是對於 JavaScript 不太熟的朋友，這邊幫你解釋一下上面的程式片段。<a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/log"><code>console.log</code></a> 是 JavaScript 中內建的將文字印在終端機上的功能，若是在瀏覽器上，則會將文字印在 debug 工具裡，而 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"><code>setTimeout</code></a> 則是在 JavaScript 中的一個內建 timer ，它可以設定一個定時器（以 ms 為單位），並在時間結束之後執行所傳入的 lambda function，因此，上面的範例片段中的 <code>setTimeout</code> 片段 <code>setTimeout(() =&gt; console.log("hello"), 0)</code> 意味著「在 0ms 之後，至終端機上印出 &ldquo;hello&rdquo; 字串」</p>

<p>對於從其他同步行為語言出身的人來說，直覺的會想說是第一個選項是很正常的，像是 JavaScript 這樣的執行行為，在前面跟我們說了這是「單執行緒」的程式語言來說，會覺得非常奇怪，因為同步行為語言來說，第二個選項的行為幾乎都是建立在多執行緒的條件下才能完成。嚴格來說，這樣的想法，也沒有錯啦，只是這個多執行緒發生的地點有所不同，下面就讓我試著解釋看看了。</p>

<p>JavaScript 是個 <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a> 的程式語言，程式語言在執行的時候會先編譯過後，將原始碼轉譯成執行環境可以執行的中介碼，並由執行環境所執行的行為，而這個執行環境一般我們稱為<a href="https://en.wikipedia.org/wiki/Virtual_machine#Process_virtual_machines">程式虛擬機器</a>。在虛擬機器裡面，程式語言的開發者可以透過許多不同的機制來達到他們所想要程式語言特性，可以是透過最佳化演算法來提昇效能，也可以像是 JavaScript 一樣使用 Event Loop 來提供非同步的行為。</p>

<p>下一集我們將會開始討論 Event Loop 的詳細執行情形，還請敬請期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[身為一個程式設計師，或許我們可以為台灣的數學教育做點什麼]]></title>
    <link href="http://blog.dylandy.tw//blog/2017/02/06/shi-yong-coffeescript-chan-sheng-ren-yi-duo-bian-xing/"/>
    <updated>2017-02-06T14:27:44+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2017/02/06/shi-yong-coffeescript-chan-sheng-ren-yi-duo-bian-xing</id>
    <content type="html"><![CDATA[<p>最近在練習 coffeescript 的時候，一直想要寫個小東西來玩玩，昨天晚上在回家的路上一邊騎車一邊想到，未來的世界、未來的教育，或許我們這些程式設計師都有參與的責任，或許編寫一些對於教育有關的程式也會是我往後的一個目標吧。帶著這樣的想法，開始思考著最近在網路上看到的影片</p>

<iframe src="https://embed.ted.com/talks/conrad_wolfram_teaching_kids_real_math_with_computers" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>現在已經是資訊化的時代了，過去我們苦心積慮的想要讓孩子們學好算數，可以用紙筆進行高難度的運算，但是這些運算，在電腦普及、智慧型手機人手一支的現代，或許值得我們重新思考，我們學習數學運算的目的是什麼呢？這些能力能夠讓我們在數學成就上面得到什麼發展嗎？是不是這些能力讓我們在過往的學習路途上扼殺了許多可能的數學天才呢？我們是不是又因為一個人有著不錯的數學計算能力，就理所當然的認為他有數學天份呢？這些問題應該是進入了資訊化社會以後的我們，不論是不是老師，我想我們都應該問自己這樣的問題。我們能不能改變什麼，透過這些我們已經身在其中的機器，幫助我們運算，是不是能夠幫助我們學習數學的過程中，能夠學習得更透撤，更有系統呢？</p>

<!-- more -->


<p>在影片中， Conrad Wolfram 示範了一個多邊形的範例，這個範例可以讓年紀很小的小朋友都可以很容易了解極限的概念。我試著把這個小玩具製作出來，透過這個小玩具不僅可以讓自己瞭解 coffeescript 的撰寫，也希望自己可以為台灣的數學教育做出一點貢獻，身為一個有能力可以編寫程式來為我們的下一代貢獻的人，我覺得沒有什麼比這更有意義的事了。</p>

<p>專案頁面：<br>
<a href="https://github.com/dylandy/polygenJS">https://github.com/dylandy/polygenJS</a></p>

<p>這是一個 jQuery plugin ，你只要把 polygen.js 引入到你的頁面中，你就可以輕易的帶入你想要的參數畫出你想要的圖形。</p>

<p><img src="/images/template.png" alt="template diagram" /></p>
]]></content>
  </entry>
  
</feed>

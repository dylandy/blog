<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Dylandy's Murmur]]></title>
  <link href="http://blog.dylandy.tw//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.dylandy.tw//"/>
  <updated>2020-01-30T23:46:41+08:00</updated>
  <id>http://blog.dylandy.tw//</id>
  <author>
    <name><![CDATA[Dylandy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby 2.7 新發布，新功能說明]]></title>
    <link href="http://blog.dylandy.tw//blog/2019/12/27/ruby-2-dot-7-fa-bu-,you-shi-mo-zhi-de-wo-men-guan-zhu-de-di-fang-ni/"/>
    <updated>2019-12-27T13:37:22+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2019/12/27/ruby-2-dot-7-fa-bu-,you-shi-mo-zhi-de-wo-men-guan-zhu-de-di-fang-ni</id>
    <content type="html"><![CDATA[<p>就如往常，Matz 選在聖誕節發布 Ruby 2.7 作為聖誕禮物，那麼這個新版本有什麼特別的呢？又有什麼是未來整個 Ruby 社群的方向呢？</p>

<p>Ruby 2.7 的新功能列表</p>

<ol>
<li><a href="#new-irb">IRB 多行模式與即時文件查閱</a></li>
<li><a href="#array-intersection">Array#intersection</a></li>
<li><a href="#tally">Enumerable#tally</a></li>
<li><a href="#filter-map">Enumerable#filter_map</a></li>
<li><a href="#produce">Enumerable#produce</a></li>
<li><a href="#default-param">Block 預設參數名稱(實驗性)</a></li>
<li><a href="#pattern-matching">Pattern Matching(實驗性)</a></li>
<li><a href="#compaction-gc">Compaction GC</a></li>
<li><a href="#keyword-argument">Keyword Argument</a></li>
</ol>


<!-- more -->


<p>根據 Matz 的說法，本次的版本為最後的 2.x 版本，下個版本將會直接跳到從 2016 開始大家就在引頸期盼的 <a href="https://blog.heroku.com/ruby-3-by-3">Ruby 3.0</a>！</p>

<p>下面是 Matz 在 RubyConf 2019 上針對 Ruby 2.7 的說明。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2g9R7PUCEXo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>下面，我們開始逐一說明本次 Ruby 2.7 的新功能。</p>

<h2><a name="new-irb">IRB 多行模式與即時文件查閱</a></h2>

<p><video autoplay="autoplay" controls="controls" muted="muted" poster="https://cache.ruby-lang.org/pub/media/irb-reline-screenshot.png" width="576" height="259">
  <source src="https://cache.ruby-lang.org/pub/media/irb_improved_with_key_take3.mp4" type="video/mp4">
</video></p>

<p>新版 irb 支援了多行編輯的功能，只要按 alt-enter 即可換行繼續編輯，我們可以從上面的影片知道，按方向鍵往上可以將整個 block 重新叫回來編輯，另外，按一次 tab 會提示可用的關鍵字，連續按多次 tab 可以進入文件模式，在互動模式下快速查找 rdoc，之後開發者可以在不用離開互動模式的狀況下進行文件的查詢，也可以鼓勵開發者在開發程式的時候編寫 rdoc 。</p>

<h2><a name="array-intersection">Array#intersection</a></h2>

<p>這並不完全算是一個新功能，這是一個簡寫，在 Ruby 2.6 引進一個兩個新功能：<a href="https://ruby-doc.org/core-2.6/Array.html#union-method"><code>union</code></a> 與 <a href="https://ruby-doc.org/core-2.6/Array.html#method-i-difference"><code>difference</code></a>，在 Ruby 2.7 中更進一步將其簡化了，使用方法如下：</p>

<pre><code class="ruby">a = [1, 2, 3]
b = [1, 2]
p a &amp; b
# [1, 2]
p a | b
# [1, 2, 3]
p a - b
# [3]
p a.intersection(b)
# [1, 2]
p a.union(b)
# [1, 2, 3]
p a.difference(b)
# [3]
</code></pre>

<h2><a name="tally">Enumerable#tally</a></h2>

<p>回傳一個 Hash ，其中為給定之 Array 中內容物與其個數。</p>

<pre><code class="ruby">[a, a, a, b, b].tally
</code></pre>

<p>會回傳</p>

<pre><code class="ruby">{"a"=&gt;3, "b"=&gt;2}
</code></pre>

<h2><a name="filter-map">Enumerable#filter_map</a></h2>

<p><code>filter_map</code> method 想要將 <code>select</code> 與 <code>map</code> 結合，從字面上，我們可以知道，這個 method 會回傳一個經過條件選擇的新 Array。</p>

<p>在過去我們如果要做到相同的效果的話，一般都需要使用 chain method 的方式來達到：</p>

<pre><code class="ruby">(1..8).select{ |x| x % 2  == 0 }.map{ |x| x ** 2 }
</code></pre>

<p>在 Ruby 2.7 中我們可以這樣做</p>

<pre><code class="ruby">(1..8).filter_map{ |x| x ** 2 if x % 2 == 0 }
</code></pre>

<h2><a name="produce">Enumerable#produce</a></h2>

<p>這個功能需要一點點想想力才有辦法理解，讓我們先來看一下此功能的 <a href="https://bugs.ruby-lang.org/issues/14781">proposal</a>:</p>

<blockquote><p>“This method produces an infinite sequence where each next element is calculated by applying the block to the previous element.”</p></blockquote>

<p>沒錯，這個 method 理論上會回傳一個無限長的 Array，讓我看看下面的範例：</p>

<pre><code class="ruby">Enumerable.produce(1){ |x| x * 2 }.take(5)
# [1, 2, 4, 8, 16]
</code></pre>

<p>這個 method 長這樣的：<code>Enumerator.produce(initial, &amp;block)</code>，預設上 initial 即為 1 ，我們亦可不傳入值，注意到我們後面的 block 為需要產生這個 Enumerable 的條件，而最後不管我們有沒有給定 <code>take(5)</code> 在記憶體裡面都是一個無限長的大小，只是最後回傳的時候給出最前面五筆，這邊需要特別注意使用，可能在大型產品上會有記憶體管理方面的問題產生。</p>

<h2><a name="default-param">Block 預設參數名稱(實驗性)</a></h2>

<p>Ruby 從 Scala, Closure, Groovy 借鏡了 Block 的預設參數名稱，規則很簡單：第一個參數的預設名稱即為 <code>_1</code>、第二個參數即為 <code>_2</code> ⋯以此類推，下面是一個簡單的範例：</p>

<pre><code class="ruby">[1, 2, 3].map { _1 * 2 }
# [2, 4, 6]
# same as [1, 2, 3].map { |x| x * 2 }
</code></pre>

<p>你仍舊可以在一般的區域變數使用「底線加上數字」做為變數名稱，但是 compiler 會跳出警告，告訴你這樣是不好的行為，請盡量不要這樣做。</p>

<h2><a name="pattern-matching">Pattern Matching(實驗性)</a></h2>

<p>在演講中，Matz 提到，像是 Pattern Matching 這樣的 Functional Programming 行為，對於 Ruby 來說需要一個全局的重新思考，或許目前的行為在之後會與目前通通不同。在那之前，讓我們看看目前 Ruby 2.7 所提供的 Pattern Matching 使用方法。</p>

<p>Pattern Matching 會回傳一個布林值，當 Pattern 相同時，則會回傳 true 反之亦然。下面是幾個簡單的範例：</p>

<pre><code class="ruby"># Array
[1,2,3] in [a,b,c] # true
[1,2,3] in [a]     # false

# Hash
{ a: 1, b: 2, c: [] } in { a: a, b: b, c: [] }
# true
p a
# 1

# 合併
case JSON.parse(request.body.read)
in {name: "Alice", age: age }
  puts age
in
  puts "no Alice"
end
</code></pre>

<h2><a name="compaction-gc">Compaction GC</a></h2>

<p>在 Ruby 2.7 中引入了記憶體壓縮垃圾蒐集演算法，意即將碎片化的記憶體重組的垃圾蒐集演算法，在一些多執行緒程式執行的過程中，可能會造成記憶體使用上的碎片化，長久下來會造成高記憶體使用與效能的下降。</p>

<p>新的 GC method <code>GC.compact</code> 期望能夠將 heap 的碎片化降到最低。</p>

<p>詳細內容請見原 <a href="https://bugs.ruby-lang.org/issues/15626">proposal</a></p>

<h2><a name="keyword-argument">Keyword Argument</a></h2>

<p><strong>這是 Ruby 2.7 與 Ruby 2.6 以前最重要的不同！</strong><br/>
<strong>未來 Ruby 3 之後將不向下相容 Ruby 2.6 的 Keyword Argument</strong></p>

<p>Ruby 2.6 以前的 keyword argument 行為如下</p>

<pre><code class="ruby">def m(a, key:10)
  p [a, key]
end
m(key: 5) #=&gt; [{:key =&gt; 5}, 10]

def foo(opt={}, key:10)
  p [opt, key]
end
m(key: 42) #=&gt; [{}, 42]
</code></pre>

<p>這真的是非常地令人崩潰的行為，上面的 function 呼叫行為應該是以下這幾種問題的綜合：</p>

<ol>
<li>Wrong Number of Arguments</li>
<li>Combination of Optional/ Rest Argument</li>
<li>Combination with Hash Argument</li>
</ol>


<p>但是 Ruby VM 卻沒有吐出錯誤訊息，所以在 Ruby 2.7 開始，這樣的行為將會被拋棄，在 Ruby 2.7 時只會吐出警告訊息，但是在 Ruby 3 之後就不能執行了，所以 Library 的開發者，如果有使用到這樣的行為，請儘速更新您的軟體，以符合未來的 Ruby 版本。</p>

<h2>Reference</h2>

<ol>
<li>Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance, <a href="https://blog.heroku.com/ruby-3-by-3">https://blog.heroku.com/ruby-3-by-3</a></li>
<li>Ruby 2.7.0 Released, <a href="https://www.ruby-lang.org/en/news/2019/12/25/ruby-2-7-0-released/">https://www.ruby-lang.org/en/news/2019/12/25/ruby-2-7-0-released/</a></li>
<li>Ruby Progress Report by Yukihiro Matsumoto(Matz), <a href="https://www.youtube.com/watch?v=2g9R7PUCEXo">https://www.youtube.com/watch?v=2g9R7PUCEXo</a></li>
<li>New Features, Methods &amp; Improvements in Ruby 2.7, <a href="https://www.rubyguides.com/2019/12/ruby-2-7-new-features">https://www.rubyguides.com/2019/12/ruby-2-7-new-features</a></li>
<li>Enumerator.generate proposal, <a href="https://bugs.ruby-lang.org/issues/14781">https://bugs.ruby-lang.org/issues/14781</a></li>
<li>Ruby 2.7 adds Enumerator#produce, <a href="https://blog.saeloun.com/2019/11/27/ruby-2-7-enumerator-produce.html">https://blog.saeloun.com/2019/11/27/ruby-2-7-enumerator-produce.html</a></li>
<li>Manual Compaction for MRI&rsquo;s GC (<code>GC.compact</code>), <a href="https://bugs.ruby-lang.org/issues/15626">https://bugs.ruby-lang.org/issues/15626</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 inotify 進行資料夾監控]]></title>
    <link href="http://blog.dylandy.tw//blog/2018/06/23/shi-yong-inotify-jin-xing-zi-liao-jia-jian-kong/"/>
    <updated>2018-06-23T14:04:20+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2018/06/23/shi-yong-inotify-jin-xing-zi-liao-jia-jian-kong</id>
    <content type="html"><![CDATA[<p>在撰寫系統時，要監視一個資料夾的變化情形，我們常會寫一個小程式跑一個無限迴圈，隨時監視目標資料夾的狀態，但是這樣的程式不僅浪費系統資源，佔用珍貴的 CPU 時間、對於硬碟 IO 的使用率提昇，也會因為這個程式佔用有限的硬碟頻寬，下面是一個使用無限迴圈實作的簡單資料夾監視程式。</p>

<pre><code class="sh">while true
do
  PASS="$(ls -la | wc -l)"
  sleep 5
  CURRENT="$(ls -la | wc -l)"
  if test ${CURRENT} -gt  ${PASS}; then
    echo "file has been added"
  fi
done
</code></pre>

<!-- more -->


<p>在 Linux kernel 2.6 以後推出了一個稱為 inotify 的子系統 (sub-system)，他延伸了系統對於檔案系統 (filesystem) 的掌控能力，並提供 API 讓使用者的程式能夠了解到檔案系統的變化情形，因此我們若是想要監控使用者對於某個資料夾的變化情形，我們可以用各種 inotify 的 client 端 library 來進行設計，下面是一個使用 Ruby inotify wrapper - rb-inotify 寫的小程式，我們可以看到，我們可以知道使用者這個動作是什麼樣的動作，被做動的檔名與路徑，因此，我們就可以對這些檔案進行操作。</p>

<pre><code class="ruby">require "rb-inotify"
notifier = INotify::Notifier.new
EVENT = [:recursive, :create, :moved_to]
notifier.watch(app_folder, *EVENT) do |event|
  puts event.name
  puts event.flags
end
notifier.run
</code></pre>

<p>因為 inotify 是 Linux Kernel 的子系統，使用 inotify 進行系統的監控不只是節省系統效能，也能將重要的 CPU 時間還給需要的程式使用，亦能減少硬碟 IO 頻寬，因此對於有監控資料夾內容的需求者，這會是一個不錯的選擇，一點小分享，提供給大家參考。</p>

<h2>Reference</h2>

<p><a href="https://en.wikipedia.org/wiki/Inotify">https://en.wikipedia.org/wiki/Inotify</a> <br>
<a href="https://github.com/guard/rb-inotify">https://github.com/guard/rb-inotify</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將你的程式 Daemon 化]]></title>
    <link href="http://blog.dylandy.tw//blog/2017/12/18/jiang-ni-de-cheng-shi-daemon-hua/"/>
    <updated>2017-12-18T21:21:00+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2017/12/18/jiang-ni-de-cheng-shi-daemon-hua</id>
    <content type="html"><![CDATA[<p>實務上我們常常會希望可以在離開 terminal 的狀況下，程式仍舊持續得執行，有些比較小、比較不需要在意系統資源耗費的程式，我們常可以看到用一些奇怪的手法來達到類似的效果，像是使用 screen 或是 tmux 來將程式跑在背景中，這樣下次登入的時候程式仍舊能夠可以被叫出來，雖然看似方便，但是仍然存在許多問題，例如 tmux 和 screen 所需的記憶體不少，且我們的程式相依於 screen 或 tmux ，當 screen 或 tmux 有任何不可預期的狀況 process 被 kill 掉了的話，我們的程式也會被連帶的受到波及，因此完全獨立的背景執行勢必是需要我們追尋的目標，以下是最近工作上簡單 survey 後的一些有關於如何 Daemon 化程式進行簡單的整理。</p>

<p>本文章主要知識來源於 <a href="https://www.jstorimer.com/blogs/workingwithcode/7766093-daemon-processes-in-ruby">Daemon Processes in Ruby</a> 的教導，希望能夠用較易理解的文字呈現出來。在寫 Daemon 之前，讓我們回頭看看一個知名的 daemonize web server 程式 <a href="https://github.com/rack/rack">rack</a>。我們來看看他將目標 web server daemon 化的程式碼片段，讓我們透過這個程式碼片段來看看是否能夠從中學到如何 daemon 一支程式。</p>

<!-- more -->


<pre><code class="ruby">def daemonize_app
  if RUBY_VERSION &lt; "1.9"
    exit if fork
    Process.setsid
    exit if fork
    Dir.chdir "/"
    STDIN.reopen "/dev/null"
    STDOUT.reopen "/dev/null" , "a"
    STDERR.reopen "/dev/null" , "a"
  else
    Process.daemon
  end
end
</code></pre>

<p>我們可以從 else 片段開始看一下，在 ruby 1.9 以後提供了一個 <code>Process.daemon</code> 的 method 來 daemon 化目前的程式，或許有些人會覺得，「嘖！又是一個 Ruby的黑魔法，什麼功能都要包裝在抽象的黑盒子裡面。」，如果你有興趣了解 <code>Process daemon</code> 是如何實作的話，這邊是 <a href="https://github.com/ruby/ruby/blob/c852d76f46a68e28200f0c3f68c8c67879e79c86/process.c#L4817-4860">Ruby MRI 的 C code</a> 可以研究一下，在跳下去研究了一番之後，你會發現其實這段 C code 做的事情跟上面這個 if 片段做的事情本質上是一模一樣的。</p>

<p>ok 那我們來逐一了解一下這個程式碼片段到底做了些什麼。</p>

<h2>Daemonize Process</h2>

<pre><code class="ruby">exit if fork
</code></pre>

<p>這行 code 巧妙的運用了 fork 的特性：他會 return 兩次，一次是在父程式 (parent process) 回應子程式 (child process) 的 pid，而在子程式的部分回應 nil，因此我們可以知道在父程式的時候 fork 會是 true 而子程式會是 false ，因此父程式會被關閉，而子程式會被保留，變成孤兒程式，那麼問題來了，一個孤兒程式，既然他的父程式已經被砍掉了，那他的 ppid (parent process id) 會是多少呢？答案是 1 ，所有的孤兒程式都會被系統核心接管，而因為被系統核心接管著，我們可以保證他的生命週期是與系統核心綁在一起了，不會因為其他的程式因素而造成此程式無故的終止。</p>

<p>這個步驟可以讓 terminal 認為程式已經被終止了，父程式是使用者執行的程式，子程式為變成孤兒的準 daemon ，因此控制權從程式身上交還給使用者，然後執行到下面這一行：</p>

<pre><code class="ruby">Process.setsid
</code></pre>

<p>執行 <code>Process.setsid</code> 會進行以下三件事情：</p>

<ul>
<li>系統新增一個新的 session 並目前的程式指定為新 session 的 leader</li>
<li>系統新增一個新的 process group 並指定目前程式為新 process group 的 group leader</li>
<li>因為此程式與 terminal 本身處於不同的 process group ，因此此程式對於 terminal 沒有控制能力</li>
</ul>


<p>為了了解上面三件事情，我們需要從 Linux 系統更深的方向理解起。</p>

<h2>Process Groups 與 Session Groups</h2>

<p>Process groups 和 session groups 皆是用於行程控制的，在這邊「行程控制」意味著終端機控制程式的方法。
我們從 process groups 開始討論起吧。</p>

<p>每個程式皆屬於一個程式群組，而這個程式群組皆是由一群互相有關聯的程式所組成的，我們稱為父程式與子程式，子程式的生命週期會與父程式的生命週期互相連動，但父程式卻不受制於子程式的生命週期。一般來說，系統會指定一個隨機的 id 給這個程式群組，但是我們也可以透過下面的這個指令來指定群組的 id。</p>

<pre><code class="ruby">Process.setpgrp(new_group_id)
</code></pre>

<p>如果我們將下面的這段程式輸入至 <code>irb</code> 我們可以發現他們的值是相同的，一般來說，Process group 的 id 會和這個 process group 的最主要的父程式的 pid 相同。打個比方，如果我們在終端機下執行了 <code>irb</code>，那麼 <code>irb</code> 的 process group id 應該會與終端機的 pid 相同，因為 <code>irb</code> 是屬於終端機的子程式。</p>

<pre><code class="ruby">puts Process.getpgrp
puts Process.pid
</code></pre>

<p>如果我們看下面這段程式，雖然子程式有自己的 pid ，但是因為子程式與父程式皆屬於相同的 process group ，所以他們的 process group id 是相同的。</p>

<pre><code class="ruby">puts Process.pid
puts Process.getpgrp

fork {
  puts Process.pidputs Process.getpgrp
}
</code></pre>

<p>從這邊我們可以往回看到前面所說的孤兒程式。我們透過將一個程式的父程式從終端機（因為我們從終端機中將其開啟），設定為系統（pid 為 1），這樣，在終端機關閉的狀況下，孤兒程式仍舊會繼續執行，不會受到終端機的生命週期所影響他的存在。</p>

<p>然後是 session group。</p>

<p>Session group 是更高一層的抽象概念，每個 session group 中會含有非常多個 process group。一個使用者登入至系統後，系統會新增一個 session 給此使用者，這個使用者在這個 session 的過程中所產生的程式皆會屬於這個 session，因此一個 session group 中會含有許多不同的 process group。我們看看以下這個指令。</p>

<pre><code class="sh">git log | grep shipped | less
</code></pre>

<p>這些指令都各自為不同的 process group 但是，因為他們是由不同的 process 所產生的 child process，但是一個簡單的 Ctrl-C 就可以將他們通通關閉，這是因為他們皆屬於同一個 session group，當我們開啟一個新的 shell 的時候，這個動作將會啟動一個新的 session group，亦即，在這個 shell 裡面所做的行為都屬於同一個 session group，而對於大部分的程式而言 session group 會與終端機連通，但，有些卻不會，那就是 daemon。</p>

<p>你的終端機在管理 session group 上面使用了一個蠻有趣的方法：將指令傳至 session leader，而 session leader 會將此指令廣播至此 session 中的所有 proccess group，當需要被執行的程式收到此指令，程式即執行此指令。</p>

<p>在 Linux 上有一個 <a href="http://shell-storm.org/shellcode/files/syscalls.html">system call</a> 可以取得目前的 session group id - <a href="http://man7.org/linux/man-pages/man2/getsid.2.html"><code>getsid(2)</code></a>，但是在 <a href="https://ruby-doc.org/core-1.9.3/Process/Sys.html">Ruby 2.0 前的核心 library</a> 裡面沒有實作這個介面，如果你真的想要對 session group id 進行管理，可以用 <code>Process.setsid</code> 來產生一個新的 session group 並將其 id 存下來，留著往後使用。</p>

<p>讓我們回到前述的 Rack 範例，第一行是新增一個子程式並關閉父程式，終端機發現其與父程式間的連結斷裂了，所以將控制權還給使用者，但此時被新增的子程式仍舊與繼承著父程式的 process groud id 與 session id，因此，在此時這個子程式並不是這些 process group 與 session group 的 leader，因此，雖然終端機將控制權交還給使用者，我們執行在背景的子程式仍舊與目前的終端機有著一絲一縷的關聯，如果此時終端機所在的 session 被中斷了，或是有人傳訊息給終端機要求關閉我們可憐的子程式，這個子程式也又只能被迫關閉，因此，我們希望完全與終端機斬斷連結，才能完整地成為一個 daemon。</p>

<p>透過執行 <code>Process.setsid</code> ，我們能夠將目前的子程式設定為一個新的 process group 與 session group 的 leader，但是需要特別注意的是：如果這個指令被執行的對象目前已經是 process group 的 leader 就會失敗，因此，要確定對象是子程式才能被正確執行，同時，由於我們產生了一個新的 session group，理論上它應該要被指定一個終端機來給使用者互動，雖然在這邊顯然的並沒有，但為了避免不必要的錯誤，我們仍舊將其離開，以確保其完全的與終端機分離，除了系統，其他人不能隨便將其關閉，換句話說，它現在自由了，沒有人可以管它了。</p>

<pre><code class="ruby">exit if fork
</code></pre>

<p>之後，Rack 將目前的工作目錄切換至系統根目錄，這步驟並不是必要的，但是就如同上面的將終端機關閉一樣，這是一個保險，避免程式因為工作目錄消失而被關閉的窘境發生。
<code>ruby
Dir.chdir "/"
</code>
在避免了因為工作目錄消失而被關閉的情形，我們需要考慮另外一個問題 &ndash; 輸出，不論是正確的 stdout 或是錯誤的輸出 stderr 都需要被忽略，因此我們將這些串流資訊導引至 <code>/dev/null</code>，你可能會問說，奇怪，那我們怎麼不能直接將它的輸出直接關閉？因為我們不曉得這個程式是否需要存在著標準輸入輸出而能夠正常執行，說不定哪天，因為我們將它關閉而造成後續的執行問題是不容易找到的，因此將其轉到 <code>/dev/null</code> 其他軟體需要這些資訊的時候，可以自由導出，不會受到影響。</p>

<pre><code class="ruby">STDIN.reopen "/dev/null"
STDOUT.reopen "/dev/null", "a"
STDERR.reopen "/dev/null", "a"
</code></pre>

<p>以上，就是從 Ruby 的角度來看如何將一個程式 daemon 化的簡單概念。
希望能夠幫助到有需要的人。</p>

<h2>Reference</h2>

<ol>
<li>Daemon Processes in Ruby, <a href="https://www.jstorimer.com/blogs/workingwithcode/7766093-daemon-processes-in-ruby">https://www.jstorimer.com/blogs/workingwithcode/7766093-daemon-processes-in-ruby</a></li>
<li>程序管理與 SELinux 初探, <a href="http://linux.vbird.org/linux_basic/0440processcontrol.php">http://linux.vbird.org/linux_basic/0440processcontrol.php</a></li>
<li>Linux System Call Table, <a href="http://shell-storm.org/shellcode/files/syscalls.html">http://shell-storm.org/shellcode/files/syscalls.html</a></li>
<li>Ruby Core 1.9 Library, <a href="https://ruby-doc.org/core-1.9.3/">https://ruby-doc.org/core-1.9.3/</a></li>
<li>Ruby Core 2.6.5 Library, <a href="https://ruby-doc.org/core-2.6.5/">https://ruby-doc.org/core-2.6.5/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Web Framework : 觀察與概念]]></title>
    <link href="http://blog.dylandy.tw//blog/2016/04/06/ruby-web-framework-xue-xi/"/>
    <updated>2016-04-06T00:00:00+08:00</updated>
    <id>http://blog.dylandy.tw//blog/2016/04/06/ruby-web-framework-xue-xi</id>
    <content type="html"><![CDATA[<p><br></p>

<h3>緣起</h3>

<p>前前後後寫 Ruby 也寫了一陣子，用習慣了別人寫的套件、別人寫的 framework 以後，慢慢的也對於各種套件撰寫的原理有了些好奇，開始想要自己編寫一些屬於自己的套件和 framework 來了解一些背後的原理與方法，從過年前到最近，花了一點時間來自己摸索怎麼用 Ruby 來寫一個 web framework ，在過程中學到了許多東西，慢慢的從很多方向來思考 framework 需要什麼。
在這篇裡面我會先將各個模組說明，之後會一個一個來討論。</p>

<!--more-->


<h3>觀察</h3>

<p>從以前就不喜歡看一堆的 document 來學東西，我喜歡從自己的發現中學習，高見龍前輩曾經在日本 RubyKaigi 上發表「<a href="http://rubykaigi.org/2013/talk/S41">Code Reading, Learning More about Ruby by Reading Ruby Source Code</a>」，因此我開始觀察不同的 web framework 試試看能不能有什麼發現。</p>

<h4>Web Framework 都有一個 config.ru 檔案？<br> 這是要做什麼的？</h4>

<p>首先呢，先查了一些資料，意外的發現網路上沒有太多關於 config.ru 單獨的說明，但是可以大致上了解， config.ru 是一個 Rack 的設定檔與執行檔，那什麼是 Rack 呢？</p>

<blockquote><p>Rack is a nice Ruby-fied replacement for CGI.<br>
Rack sits between all the frameworks (Rails, Sinatra, Rulers) and all the app servers (thin, unicorn, Rainbows, mongrel) as an adapter.<br>
Rack is a convenient way to build your Ruby app out of a bunch of thin layers, like a stack of pancakes. The layers are called middleware. Or pancakes, why not?<br></p>

<p> &mdash; <a href="http://codefol.io/posts/What-is-Rack-A-Primer">What Is Rack? : a Primer</a></p></blockquote>

<p>簡單的說，Rack 就是一個用 Ruby 做的 <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">CGI</a> ，它在應用程式和伺服器之間做資料的轉換和處理，可以讓我們用更邏輯的方式來撰寫程式，對於 Ruby framework 的抽象化有很大的幫助，而 config.ru 就是 Rack 的執行點，也可以稱為設定檔，而 config.ru 是用純 Ruby 的語法所寫成，理論上，我們可以把 framework 的所有的東西都寫在 config.ru 裡面，就能執行了。但是，我們不要，也不應該這麼做，對於 Ruby 的程式撰寫，其中最重要的一個目的在於「<a href="https://en.wikipedia.org/wiki/Semantic-oriented_programming">語意化</a>」，用以提升程式<strong>可再利用性</strong>、<strong>可維護性</strong>、<strong>提升開發速度</strong>，為了維持語意化的目的，使用多檔案的架構勢必是不可少的，那，如何區分資料夾呢？</p>

<h4>每個 MVC 架構的程式對資料夾的分配好像都很類似</h4>

<p>以前寫過的各種 MVC 框架的結構感覺上都大同小異，將 Modal , Controller , View 分開來放，將設定檔放在 config 資料夾內，可以讓設定檔和程式的邏輯分開，將 Modal , Controller , View 分開，可以在設計上更加方便，至於什麼是 MVC 架構呢？<br></p>

<blockquote><p>Model–view–controller (MVC) is a software architectural pattern for implementing user interfaces on computers. It divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user.<br></p>

<ul>
<li>The model directly manages the data, logic and rules of the application.<br></li>
<li>A view can be any output representation of information, such as a chart or a diagram. Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants.<br></li>
<li>The third part, the controller, accepts input and converts it to commands for the model or view.
<br>
<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Wikipedia - Modal View Controller</a></li>
</ul>
</blockquote>

<p>大部分的 framework 都有如以下的結構：</p>

<p><br><img src="/images/tree-structure.png" alt="tree structure" /></p>

<h4>Public 可以放什麼東西呢？</h4>

<p>在 Public 資料夾中，一般是放靜態檔案的地方，系統裡的靜態檔案一般可以分成以下的幾種：</p>

<ul>
<li>asset ( css / JavaScript )</li>
<li>image</li>
<li>other format file ( <em>.pdf / </em>.docs / *.xlsx &hellip; )</li>
</ul>


<p>在 Rack server 的機制裡面，這個資料夾的內容可以直接被下載，用以增加頁面加載的速度，不用透過自身 server 的重新 render ( 像是 nodejs 的 pm2 的作法 ) 這樣對於有大量靜態資源的頁面來說，是個較容易省下計算資源和增加連線效率的方法。</p>

<h4>Rakefile 是做什麼的呢？</h4>

<p>Rake 是一個 Ruby 中的任務自訂小工具，我們可以透過在 Rakefile 裡面自己撰寫一些任務，來幫忙我們加速開發與上線的麻煩點，Rakefile 裡面使用到的都是標準的 Ruby 語法，也就是說，我們可以用簡單的幾行 Ruby 就可以進行一些專案上的控制，如：DB migration, install project &hellip;我們之後會討論如何撰寫 Rakefile 的任務。</p>

<h3>簡單總結</h3>

<ul>
<li>config.ru 是一個 Rack-based 的 framework 主程式</li>
<li>MVC 框架的基本資料夾格式為：

<ul>
<li>app/

<ul>
<li>modal/</li>
<li>view/</li>
<li>controller/</li>
</ul>
</li>
<li>public/</li>
</ul>
</li>
<li>Public 是靜態檔案的集散地</li>
<li>Rakefile 定義了這個程式或 framework 所使用到的一些指令行任務</li>
</ul>

]]></content>
  </entry>
  
</feed>

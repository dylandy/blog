<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dylandy's Murmur]]></title>
  <link href="http://blog.dylandy.tw/blog/atom.xml" rel="self"/>
  <link href="http://blog.dylandy.tw/blog/"/>
  <updated>2017-11-02T11:41:06+08:00</updated>
  <id>http://blog.dylandy.tw/blog/</id>
  <author>
    <name><![CDATA[Dylandy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[台中食記-麵屋田宗]]></title>
    <link href="http://blog.dylandy.tw/blog/blog/2017/10/07/tai-zhong-shi-ji-mian-wu-tian-zong/"/>
    <updated>2017-10-07T16:18:42+08:00</updated>
    <id>http://blog.dylandy.tw/blog/blog/2017/10/07/tai-zhong-shi-ji-mian-wu-tian-zong</id>
    <content type="html"><![CDATA[<p>TL;DR 田宗的用心與水準真心不錯，有機會的話請一定要去吃吃看。</p>

<p>本來想要在吃完的時候就來寫這篇食記了，在台灣吃過這麼多家拉麵店，麵屋田宗是第一家讓我感受到那種對拉麵的熱愛，那種狂熱與堅持，再再都是那麼的觸動我心。經過幾個禮拜的沈澱之後，我決定試著把我對於麵屋田宗的一些感想用我拙劣的文字描繪出來。</p>

<p>因為求學的關係，之前在台北生活了七年的時間，身為一個台中人，在網路上看到任何有關於台中的消息總是會特別的關注，說來慚愧，因為在台北待的太久的關係，對於台中餐廳的認識並不比許多台北人來的高明，與田宗的邂逅也是在網路上看到一名廚師網友的大力推薦才初次耳聞，文中的那種英雄惜英雄讓我特別有帶入感，也讓我對於造訪田宗的旅程更是期待。</p>

<p>或許是我來到店家的時間有點晚了，到達餐廳時已經臨界中午打烊，上一組客人帶著滿足的笑容與我擦身而過。推開木製的大門，醬油與味淋的清香撲面而來，或許是生活習慣的關係，對於醬油與味淋的味道感到特別的令人安心，有別於其他拉麵店總是會播放各種日本音樂，店內飄蕩著輕柔和緩的爵士樂，顯示出了店主心中小小的反動。</p>

<!-- more -->


<p>忘記在哪裡看到的拉麵師傅這麼要求自己的拉麵的：「一碗好吃的拉麵不能是赤裸的，麵是麵、湯是湯，這樣不行。」簡單的一句話包含很多經驗在裡頭，就如湯與麵條的選擇，同時也是麵條硬度的選擇；我的湯頭是厚重系的還是清淡系的？一般來說厚重系的湯頭需要搭配較粗、較捲也較硬的麵條來帶起湯頭，反之清淡、清雅的湯頭需要搭配較為細直硬度 Al Dente<sup>[1]</sup> 的麵條為佳。</p>

<p>這次點的是招牌豚骨拉麵，看著店主將盛好醬汁的麵碗放至麵鍋上預熱，富有節奏感的攪拌醬汁，像跳舞般地同時照顧叉燒地燒炙，各種細節皆面面俱到做的無微不至，那種在時間與節奏的搭配上的和諧感，在上菜前已是一場視覺與嗅覺的享受。</p>

<p><img src="http://blog.dylandy.tw/blog/images/tamune_tonkotsu_ramen.jpg" alt="豚骨魚介拉麵" /></p>

<p>剛上手時，湯頭的清香溢滿整個鼻腔，淡雅中帶著豚骨的積極氣息，用湯匙輕帶一下液面，與常見的各家豚骨湯頭的濃稠不同，輕柔的觸感非常特別，記憶中的博多系豚骨湯頭是一種用大火長時間滾出來的濃厚，帶著強烈的豬骨味與豬膠質黏稠與醇厚的表現<sup>[2]</sup>，在吃的較為清淡的東京豚骨湯頭自然地朝向另一方向發展，加入了魚干（煮干）與柴魚等海鮮元素，使得豬味下降，更帶入一些鮮甜味道進入其中，保留了豚骨的油脂香，但是透過海鮮湯頭將其味道中和，使得整體味道更加調和，在品嚐的過程中較不會因為油膩感而產生不適<sup>[3]</sup>。田宗的湯頭亦選用了豚骨魚介的類別，但是在傳統的豚骨魚介上進行了巧妙的調整，與其他豚骨魚介店家相比，田宗的湯頭在調味上下了很大的一番功夫，將豬骨熬煮後會產生的腥臊味掩去，並提升豬肉本身的香氣，又可以吃到魚介的鮮甜，那種猶如在海邊騎著一頭小豬般暢快的感覺是怎麼回事呀。</p>

<p><video style="width:100%" autoplay="autoplay" loop>
  <source src="http://blog.dylandy.tw/blog/videos/soup.mp4">
</video></p>

<p>田宗的麵條選擇在第一時間讓人覺得蠻有趣的，在較不濃厚的湯頭下，選擇了像是烏龍麵般較粗的麵條；當開始吃麵的時候那種平衡感體現出來時，才能知道店主的用心，店主習慣將麵條煮得相對 Al Dente 更軟一些，對於吃習慣二郎系拉麵的鐵麵朋友可能會有點不適應，若是到訪的話，請務必記得跟老闆提醒不要太軟，而這樣較軟的前提下，粗麵較能帶起湯汁的特性，讓湯與麵結合的相當完美，原本擔心的赤裸麵條並沒有發生。</p>

<p>常常在吃拉麵的時候，因為油膩感與過鹹的調味，麵條吃到一半時，煩悶與膩味感層層湧現，這時，我會將專注力從湯頭與麵條轉移到配菜上，在化解油膩與平淡的方法中，最常見的調味法是透過辛香料的添加，將鼻腔與口腔中的味道完全洗掉，讓我們有種清爽感，例如：生洋蔥絲；另一種方法則是使用酸性調味，將油脂的黏膩感洗去，就如德國豬腳搭配的酸菜般，也如日本拉麵中的筍乾的存在。或許是害怕筍乾的味道搶走湯頭的風采，許多的拉麵店特別將筍乾洗了又洗，使得其味道變得相當清淡，只保留了爽脆的口感，但卻讓筍乾的酸味失去，同時也失去了那種解膩的功能。在吃第一口時候，田宗的筍乾口味是懷念的，或許是因為爺爺家在竹山的關係，對於台灣的筍乾口味非常熟悉，從小就聽家中長輩說竹山產的筍乾大部分都是外銷到日本做拉麵，這種懷念感就像是把我帶回到竹山家的餐桌上那般懷念。和店主聊天的過程中店主說這是嘉義的筍乾，因為台灣的筍乾品質比日本產的好很多，所以選擇使用台灣本產的筍乾。</p>

<p><img src="http://blog.dylandy.tw/blog/images/tamune_yuzu.jpg" alt="湯裡的彩蛋柚子皮" style="width:100%"/></p>

<p>店主是一個對於味覺平衡非常厲害的廚師，一碗湯麵中，可以看到許多為了味覺平衡做作的努力，在西方的廚藝學校中流行著這麼一句話：「如果鹽是讓你的食物增色，那麼酸能使得你的食物驚艷，真正出色的關鍵。」，知名廚藝 YouTuber - <a href="https://www.youtube.com/channel/UCzH5n3Ih5kgQoiDAQt2FwLw">Brothers Green Eats</a>也說過類似的話, If the salt is bringing out and enhancing the flavour of the food, the acidity is just going to make it brighter and sing to the heaven.<sup>[4]</sup>在拉麵湯中的小彩蛋是一絲一絲的柚子皮，微酸的氣息與淡淡的柚子清香，柚子皮的淡淡苦澀口感，讓湯頭的黏膩與鹹澀得到紓緩，確實是相當聰明的方法，在此前，我只有在京都的豬一拉麵有吃過柚子皮入湯的方法，但是當時在豬一時柚子並不是店主的推薦吃法，反而是若我們有些膩味可以添加的選配，在田宗店主將柚子皮與湯的結合非常引人入勝，是一大佳作呢。</p>

<p>「每家拉麵店都有他追尋的味道。」店主這麼說著眼神中閃耀出專注的光芒，像是在闡述也像是在與自己對話，猶如問道於麵般的執著，店主在拉麵的腳步上，已經超出許多其他店家許多了。</p>

<p>推薦給您，麵屋田宗。</p>

<h3>Reference</h3>

<p>[1] <a href="https://en.wikipedia.org/wiki/Al_dente">Al dente</a><br>
[2] <a href="https://ja.wikipedia.org/wiki/%E5%8D%9A%E5%A4%9A%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%B3">博多ラーメン</a><br>
[3] <a href="http://kenshin.hk/2013/04/22/%E5%8A%8D%E5%BF%83%E6%8B%89%E9%BA%B5%E7%A0%94%E7%A9%B6%E6%89%80-3-%E8%B1%9A%E9%AA%A8%E6%8B%89%E9%BA%B5%E7%9A%84%E8%B5%B7%E6%BA%90%EF%BC%8C%E7%99%BC%E5%B1%95%E6%B5%81%E8%A1%8C%E4%B9%8B%E8%BB%8C/">豚骨拉麵的起源，發展流行之軌跡</a><br>
[4] <a href="https://www.youtube.com/watch?v=TCVTOa01uN8">15 Mistakes Most Beginner Cooks Make</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[身為一個程式設計師，或許我們可以為台灣的數學教育做點什麼]]></title>
    <link href="http://blog.dylandy.tw/blog/blog/2017/02/06/shi-yong-coffeescript-chan-sheng-ren-yi-duo-bian-xing/"/>
    <updated>2017-02-06T14:27:44+08:00</updated>
    <id>http://blog.dylandy.tw/blog/blog/2017/02/06/shi-yong-coffeescript-chan-sheng-ren-yi-duo-bian-xing</id>
    <content type="html"><![CDATA[<p>最近在練習 coffeescript 的時候，一直想要寫個小東西來玩玩，昨天晚上在回家的路上一邊騎車一邊想到，未來的世界、未來的教育，或許我們這些程式設計師都有參與的責任，或許編寫一些對於教育有關的程式也會是我往後的一個目標吧。帶著這樣的想法，開始思考著最近在網路上看到的影片</p>

<iframe src="https://embed.ted.com/talks/conrad_wolfram_teaching_kids_real_math_with_computers" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>現在已經是資訊化的時代了，過去我們苦心積慮的想要讓孩子們學好算數，可以用紙筆進行高難度的運算，但是這些運算，在電腦普及、智慧型手機人手一支的現代，或許值得我們重新思考，我們學習數學運算的目的是什麼呢？這些能力能夠讓我們在數學成就上面得到什麼發展嗎？是不是這些能力讓我們在過往的學習路途上扼殺了許多可能的數學天才呢？我們是不是又因為一個人有著不錯的數學計算能力，就理所當然的認為他有數學天份呢？這些問題應該是進入了資訊化社會以後的我們，不論是不是老師，我想我們都應該問自己這樣的問題。我們能不能改變什麼，透過這些我們已經身在其中的機器，幫助我們運算，是不是能夠幫助我們學習數學的過程中，能夠學習得更透撤，更有系統呢？</p>

<!-- more -->


<p>在影片中， Conrad Wolfram 示範了一個多邊形的範例，這個範例可以讓年紀很小的小朋友都可以很容易了解極限的概念。我試著把這個小玩具製作出來，透過這個小玩具不僅可以讓自己瞭解 coffeescript 的撰寫，也希望自己可以為台灣的數學教育做出一點貢獻，身為一個有能力可以編寫程式來為我們的下一代貢獻的人，我覺得沒有什麼比這更有意義的事了。</p>

<p>專案頁面：<br>
<a href="https://github.com/dylandy/polygenJS">https://github.com/dylandy/polygenJS</a></p>

<p>這是一個 jQuery plugin ，你只要把 polygen.js 引入到你的頁面中，你就可以輕易的帶入你想要的參數畫出你想要的圖形。</p>

<p><img src="http://blog.dylandy.tw/blog/images/template.png" alt="template diagram" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[設定 public key 進行 SSH 連線]]></title>
    <link href="http://blog.dylandy.tw/blog/blog/2016/05/20/she-ding-public-key-jin-xing-ssh-lian-xian/"/>
    <updated>2016-05-20T19:06:07+08:00</updated>
    <id>http://blog.dylandy.tw/blog/blog/2016/05/20/she-ding-public-key-jin-xing-ssh-lian-xian</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;身為一個宅宅工程師，對於使用 ssh 連線登入遠端主機是家常便飯的事情，但是也常常會因為 ssh port 被一些惡意程式攻擊，導致主機的帳號密碼被猜到，從而被迫換機器或是全機重灌等等的悲劇。
有些系統工程師為了避免這樣的風險，把 ssh port 從預設的 22 port 搬移到其他的 port 上，希望能夠躲過大部分的機器人掃描，並且要求使用者的密碼要足夠複雜，但是相對於這些方法，使用 public key 來登入 ssh 主機似乎是最安全的作法，首先，足夠長度的 key length 能夠有效防止攻擊者的攻擊，並且以目前的科技與已知的演算法，並沒有有效的方法進行 key 破解，<a href="https://en.wikipedia.org/wiki/Integer_factorization">畢竟 key 的拆解</a>是一個 <a href="https://en.wikipedia.org/wiki/NP-hardness">NP-hard 的問題</a>，因此能夠使用 public key 來進行連線登入的話是一個較為安全的連線方法。</p>

<!--more-->


<ul>
<li>要使用 public key 登入遠端伺服器的第一步，就是先產生 client 端的 public key，可以參考 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">Github 的範例文件</a></li>
</ul>


<script src="https://gist.github.com/dylandy/56e5ed043d616a892d0e82109910b99b.js"></script>


<p>這邊建議使用 2048 bit 以上的安全加密，目前現行的商用網站加密層級至少都達到了 2048 bit ，因此，為了安全性考量，4096 bit 是很有必要的。<br></p>

<ul>
<li>使用 ssh-copy-id 工具將我們剛剛產生的 public key 上傳到伺服器上，這個程式會在伺服器上使用者的家目錄下 .ssh 資料夾新增一個 authorized_keys 檔案，並將 client 的 public key 存在裡面，因此如果不想使用 ssh-copy-id 的人，可以自己新增一個 authorized_keys 檔案也是可以的。</li>
</ul>


<script src="https://gist.github.com/dylandy/571ace32c9ad3d548c6ae87c002ba278.js"></script>


<p>使用 Mac 的朋友如果要使用 ssh-copy-id 的話，需要另外安裝，這個程式沒有包含在 ssh 裡面，可以透過 brew 來安裝。</p>

<script src="https://gist.github.com/dylandy/bade9ef40829f51499a5a1839dec8403.js"></script>


<ul>
<li>最後要修改 /etc/ssh/sshd_conf 這個檔案，找到 PubkeyAuthentication 將 no 改成 yes，並將 PasswordAuthentication 由 yes 改成 no，限制只能透過 public key 來進行登入</li>
</ul>


<script src="https://gist.github.com/dylandy/7b2877ce6aa9f075312b99a23ddefdcd.js"></script>


<p>設定完成以後，請記得將 ssh 服務重開。</p>

<p>這樣往後就可以透過 public key 來登入了，也省下每次登入都要打一大串密碼的困擾了。</p>

<script src="https://gist.github.com/dylandy/636aa794d2cf02e33b3e72b8721b2240.js"></script>


<p>PS: 可以透過在 .ssh 資料夾下新增一個 config 檔案，將常用的登入設定寫進去，也可免去每次登入都要輸入一大堆 ip 和 domain 的麻煩，下面是一個簡單的範例。</p>

<script src="https://gist.github.com/dylandy/2aa177ffcff15e10d5657f869a0270c2.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Web Framework : 觀察與概念]]></title>
    <link href="http://blog.dylandy.tw/blog/blog/2016/04/06/ruby-web-framework-xue-xi/"/>
    <updated>2016-04-06T00:00:00+08:00</updated>
    <id>http://blog.dylandy.tw/blog/blog/2016/04/06/ruby-web-framework-xue-xi</id>
    <content type="html"><![CDATA[<p><br></p>

<h3>緣起</h3>

<p>前前後後寫 Ruby 也寫了一陣子，用習慣了別人寫的套件、別人寫的 framework 以後，慢慢的也對於各種套件撰寫的原理有了些好奇，開始想要自己編寫一些屬於自己的套件和 framework 來了解一些背後的原理與方法，從過年前到最近，花了一點時間來自己摸索怎麼用 Ruby 來寫一個 web framework ，在過程中學到了許多東西，慢慢的從很多方向來思考 framework 需要什麼。
在這篇裡面我會先將各個模組說明，之後會一個一個來討論。</p>

<!--more-->


<h3>觀察</h3>

<p>從以前就不喜歡看一堆的 document 來學東西，我喜歡從自己的發現中學習，高見龍前輩曾經在日本 RubyKaigi 上發表「<a href="http://rubykaigi.org/2013/talk/S41">Code Reading, Learning More about Ruby by Reading Ruby Source Code</a>」，因此我開始觀察不同的 web framework 試試看能不能有什麼發現。</p>

<h4>Web Framework 都有一個 config.ru 檔案？<br> 這是要做什麼的？</h4>

<p>首先呢，先查了一些資料，意外的發現網路上沒有太多關於 config.ru 單獨的說明，但是可以大致上了解， config.ru 是一個 Rack 的設定檔與執行檔，那什麼是 Rack 呢？</p>

<blockquote><p>Rack is a nice Ruby-fied replacement for CGI.<br>
Rack sits between all the frameworks (Rails, Sinatra, Rulers) and all the app servers (thin, unicorn, Rainbows, mongrel) as an adapter.<br>
Rack is a convenient way to build your Ruby app out of a bunch of thin layers, like a stack of pancakes. The layers are called middleware. Or pancakes, why not?<br></p>

<p> &mdash; <a href="http://codefol.io/posts/What-is-Rack-A-Primer">What Is Rack? : a Primer</a></p></blockquote>

<p>簡單的說，Rack 就是一個用 Ruby 做的 <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">CGI</a> ，它在應用程式和伺服器之間做資料的轉換和處理，可以讓我們用更邏輯的方式來撰寫程式，對於 Ruby framework 的抽象化有很大的幫助，而 config.ru 就是 Rack 的執行點，也可以稱為設定檔，而 config.ru 是用純 Ruby 的語法所寫成，理論上，我們可以把 framework 的所有的東西都寫在 config.ru 裡面，就能執行了。但是，我們不要，也不應該這麼做，對於 Ruby 的程式撰寫，其中最重要的一個目的在於「<a href="https://en.wikipedia.org/wiki/Semantic-oriented_programming">語意化</a>」，用以提升程式<strong>可再利用性</strong>、<strong>可維護性</strong>、<strong>提升開發速度</strong>，為了維持語意化的目的，使用多檔案的架構勢必是不可少的，那，如何區分資料夾呢？</p>

<h4>每個 MVC 架構的程式對資料夾的分配好像都很類似</h4>

<p>以前寫過的各種 MVC 框架的結構感覺上都大同小異，將 Modal , Controller , View 分開來放，將設定檔放在 config 資料夾內，可以讓設定檔和程式的邏輯分開，將 Modal , Controller , View 分開，可以在設計上更加方便，至於什麼是 MVC 架構呢？<br></p>

<blockquote><p>Model–view–controller (MVC) is a software architectural pattern for implementing user interfaces on computers. It divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user.<br></p>

<ul>
<li>The model directly manages the data, logic and rules of the application.<br></li>
<li>A view can be any output representation of information, such as a chart or a diagram. Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants.<br></li>
<li>The third part, the controller, accepts input and converts it to commands for the model or view.
<br>
<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Wikipedia - Modal View Controller</a></li>
</ul>
</blockquote>

<p>大部分的 framework 都有如以下的結構：</p>

<p><br><img src="http://blog.dylandy.tw/blog/images/tree-structure.png" alt="tree structure" /></p>

<h4>Public 可以放什麼東西呢？</h4>

<p>在 Public 資料夾中，一般是放靜態檔案的地方，系統裡的靜態檔案一般可以分成以下的幾種：</p>

<ul>
<li>asset ( css / JavaScript )</li>
<li>image</li>
<li>other format file ( <em>.pdf / </em>.docs / *.xlsx &hellip; )</li>
</ul>


<p>在 Rack server 的機制裡面，這個資料夾的內容可以直接被下載，用以增加頁面加載的速度，不用透過自身 server 的重新 render ( 像是 nodejs 的 pm2 的作法 ) 這樣對於有大量靜態資源的頁面來說，是個較容易省下計算資源和增加連線效率的方法。</p>

<h4>Rakefile 是做什麼的呢？</h4>

<p>Rake 是一個 Ruby 中的任務自訂小工具，我們可以透過在 Rakefile 裡面自己撰寫一些任務，來幫忙我們加速開發與上線的麻煩點，Rakefile 裡面使用到的都是標準的 Ruby 語法，也就是說，我們可以用簡單的幾行 Ruby 就可以進行一些專案上的控制，如：DB migration, install project &hellip;我們之後會討論如何撰寫 Rakefile 的任務。</p>

<h3>簡單總結</h3>

<ul>
<li>config.ru 是一個 Rack-based 的 framework 主程式</li>
<li>MVC 框架的基本資料夾格式為：

<ul>
<li>app/

<ul>
<li>modal/</li>
<li>view/</li>
<li>controller/</li>
</ul>
</li>
<li>public/</li>
</ul>
</li>
<li>Public 是靜態檔案的集散地</li>
<li>Rakefile 定義了這個程式或 framework 所使用到的一些指令行任務</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.dylandy.tw/blog/blog/2016/03/14/hello-world/"/>
    <updated>2016-03-14T23:13:07+08:00</updated>
    <id>http://blog.dylandy.tw/blog/blog/2016/03/14/hello-world</id>
    <content type="html"><![CDATA[<p>Hello Dylandy here, this is the new blog for me. Maybe somebody use to see my privious blog on <a href="http://dylandychat.blogspot.com">blogger</a> which would probobly not update so far.<br/></p>

<p>This blog will content something about technologies, something around me and maybe some politic thinking about Taiwan as well. <br/></p>

<p>Hello, 我是迪蘭帝，經過一段時間的醞釀以後，我決定將部落格從原本的 <a href="http://dylandychat.blogspot.com">blogger</a> 搬家到 github page 上了，blogger 雖然提供了許多方便的功能，但是畢竟已經跟不上時代的腳步，
醜醜的 <a href="https://en.wikipedia.org/wiki/Responsive_web_design">RWD</a> 介面，不容易自訂 style &hellip; 等等的缺陷，所以在最近決定跳槽了。<br/></p>

<p>歡迎來到 Dylandy&rsquo;s Murmur ，翻翻我的技術筆記與聽聽我的一些牢騷，希望能夠為這個枯燥的網路帶來一些有趣的聲音。</p>
]]></content>
  </entry>
  
</feed>
